<?php

	function list_add_query_condition($query, $condition)
	{
		$whereCondition = list_get_where_condition($query);

		if ($whereCondition == '') {
			$query .= "\n";
			$query .= 'WHERE ' . $condition;
		} else {
			$query = list_encapsulate_where_condition($query, $whereCondition);

			// TODO: KLAMMERN DYNAMISCH NUR BEI BEDARF ERGÄNZEN
			$query .= ' AND (' . $condition . ')';
		}

		return $query;
	}

	function list_add_query_condition_filter($application, $action, $list)
	{
		$list['list']['where_condition'] = list_get_where_condition($list['list']['query']);

		if ($list['list']['where_condition'] != '') {
			$list['list']['query'] = list_encapsulate_where_condition($list['list']['query'], $list['list']['where_condition']);
		}

		if (preg_match('/^FROM [a-z_]+ ([a-z_]+)/m', $list['list']['query'], $matches)) {
			$mainTableShortcut = $matches[1] . '.';
		} else {
			$mainTableShortcut = '';
		}

		$qry = 'SELECT
					content,
					filter
				FROM list_' . $application . '
				WHERE (action REGEXP :action OR
						action = "") AND
					(filter != "" OR
						type = "filter")';

		$res = db_query($qry, array('action' => '(^|,)' . $action . '(,|$)'));
		$filterFields = array();
		while ($row = db_fetch($res)) {
			$filterType = list_determine_filter_type($row['filter']);
			$content = list_create_filter_field_name($list, $row['content'], $filterType);

			$filterFields[$content]['type']   = $filterType;
			$filterFields[$content]['filter'] = $row['filter'];
		}

		$partsFilter = explode('~', $_GET['filter']);
		$i = 0;
		foreach ($partsFilter as $partFilter) {
			$partsFilterSub = explode(':', $partFilter);

			if (isset($filterFields[$partsFilterSub[0]])) {
				$j = 0;

				$partsPartsFilterSub1 = explode('|', $partsFilterSub[1]);
				foreach ($partsPartsFilterSub1 as $partPartsFilterSub1) {
					$i++;
					$j++;

					if (($list['list']['where_condition'] == '') AND ($i == 1)) {
						$qryConnector = "\n" . 'WHERE ';
					} else {
						$qryConnector = '';

						if ($j == 1) {

							// im ersten Durchlauf nicht gesetzt
							if ((isset($openedBracket)) AND ($openedBracket)) {
								$qryConnector .= ')';

								$openedBracket = false;
							}

							$qryConnector = ' AND ';
						} else {
							$qryConnector = ' OR ';
						}
					}

					if (($j == 1) AND (count($partsPartsFilterSub1) > 1)) {
						$qryConnector .= '(';

						$openedBracket = true;
					}

					$referenceTableShortcut = $mainTableShortcut;
					$referenceField 		= $partsFilterSub[0];
					$caseMatch 				= 'LIKE';

					// TODO: 19021 REMOVE HACK
					if ($referenceField == 'responsible_user_ids') {
						$caseMatch = 'JSON_CONTAINS';
					// TODO: 19021 REMOVE HACK
					} elseif ((($application == 'employees') OR ($application == 'subcontractors')) AND ($referenceField == 'comments')) {

						if ($partPartsFilterSub1 == 0) {
							$caseMatch = '=';
						} else {
							$caseMatch = '!=';
						}

						$partPartsFilterSub1 = '';
					// TODO: 19021 REMOVE HACK
					} elseif (($application == 'working_times') AND ($referenceField == 'license_plate')) {
						$referenceTableShortcut = 'da_fl.';
						$referenceField 		= 'license_plate';
					} else {
						list($referenceTableShortcut, $referenceField) = list_determine_reference_table_shortcut_and_field($list, $referenceTableShortcut, $referenceField);

						if ($filterFields[$partsFilterSub[0]]['type'] == 'select') {

							if (!preg_match('/SELECT DISTINCT/', $filterFields[$partsFilterSub[0]]['filter'])) {
								$caseMatch = '=';
							}
						}
					}

					// soll so heißen wie angegeben, damit Query einfacher zu lesen ist
					$paramName 	= $partsFilterSub[0] . '_filter' . $j;
					$paramValue = $partPartsFilterSub1;

					if ($caseMatch == 'JSON_CONTAINS') {
						$filterCondition = 'JSON_CONTAINS(' . $referenceTableShortcut . $referenceField . ', :' . $paramName. ')';
					} else {
						$filterCondition = $referenceTableShortcut . $referenceField . ' ' . $caseMatch . ' :' . $paramName;
					}

					// falls ein GROUP BY im List-Query vorhanden ist, muss die $filterCondition vor dem GROUP BY eingefügt werden
					if (preg_match('/GROUP BY/', $list['list']['query'])) {

						if (preg_match('/SUM\([a-z_\.]+\)/', $referenceField)) {
							$list['list']['query'] .= "\n" . 'HAVING ' . $filterCondition;
						} else {
							$list['list']['query'] = str_replace('GROUP BY', $qryConnector . $filterCondition . "\n" . 'GROUP BY', $list['list']['query']);
						}
					} else {
						$list['list']['query'] .= $qryConnector . trim($filterCondition);
					}

					if (($caseMatch == '=') OR ($caseMatch == '!=')) {
						$list['list']['params'][$paramName] = $paramValue;
					} elseif ($caseMatch == 'LIKE') {
						$list['list']['params'][$paramName] = '%' . $paramValue . '%';
					} elseif ($caseMatch == 'JSON_CONTAINS') {
						$list['list']['params'][$paramName] = $paramValue;
					}
				}
			}
		}

		// nicht gesetzt, wenn kein Filter vorhanden
		if ((isset($openedBracket)) AND ($openedBracket)) {
			$list['list']['query'] .= ')';
		}

		return $list;
	}

	function list_add_query_condition_search($application, $action, $list)
	{
		$list['list']['where_condition'] = list_get_where_condition($list['list']['query']);

		if ($list['list']['where_condition'] != '') {
			$list['list']['query'] = list_encapsulate_where_condition($list['list']['query'], $list['list']['where_condition']);
		}

		if (preg_match('/^FROM [a-z_]+ ([a-z_]+)/m', $list['list']['query'], $matches)) {
			$mainTableShortcut = $matches[1] . '.';
		} else  {
			$mainTableShortcut = '';
		}

		if (preg_match('/^list_quicksearch/', $action)) {
			$partsQualifier = explode(',', $list['list']['qualifier']);

			$i = 0;
			foreach ($partsQualifier as $partQualifier) {
				$i++;

				if (($list['list']['where_condition'] == '') AND ($i == 1)) {
					$list['list']['query'] .= "\n" . 'WHERE (';
				} elseif ($i == 1) {
					$list['list']['query'] .= ' AND (';
				} else {
					$list['list']['query'] .= ' OR ';
				}

				$referenceTableShortcut = $mainTableShortcut;
				$referenceField 		= $partQualifier;

				list($referenceTableShortcut, $referenceField) = list_determine_reference_table_shortcut_and_field($list, $referenceTableShortcut, $referenceField);

				// soll so heißen wie angegeben, damit Query einfacher zu lesen ist
				$paramName 	= $partQualifier . '_quicksearch';
				$paramValue = $_GET['tag'];

				$list['list']['query'] .= $referenceTableShortcut . $referenceField . ' LIKE :' . $paramName;

				if (preg_match('/^[\d]{2}[.]{1}[\d]{2}[.]?$/', $paramValue)) {
					$partsSearchtag = explode('.', $paramValue);
					$paramValue 	= '-' . $partsSearchtag[1] . '-' . $partsSearchtag[0];
				} elseif (preg_match('/^[\d]{2}[.]{1}[\d]{4}?$/', $paramValue)) {
					$partsSearchtag = explode('.', $paramValue);
					$paramValue 	= $partsSearchtag[1] . '-' . $partsSearchtag[0] . '-';
				} elseif (preg_match('/^[\d]{2}[.]{1}[\d]{2}[.]{1}[\d]{4}$/', $paramValue)) {
					$partsSearchtag = explode('.', $paramValue);
					$paramValue 	= $partsSearchtag[2] . '-' . $partsSearchtag[1] . '-' . $partsSearchtag[0];
				}

				$list['list']['params'][$paramName] = '%' . $paramValue . '%';
			}

			if ($i > 0) {
				$list['list']['query'] .= ')';
			}
		} else {
			$formFields = array();
			$params 	= array();

			for($i = 0; $i <= 1; $i++) {
				$qry = 'SELECT type, options, content, additional_parameters FROM form_' . $application . ' WHERE action REGEXP :action AND type != "form" AND type != "button"';

				if ($i == 0) {
					$params['action'] = '(^|,)' . str_replace('list_', 'form_', $action) . '(,|$)';
				} elseif ($i == 1) {
					$params['action'] = '(^|,)form_search(,|$)';
				}

				// TODO: EXCEPTION ÜBERPRÜFEN; ALLERDINGS IST MULTISELECT AKTUELL ÜBER additional_parameters_exception GELÖST (z. B. form_tasks)
				$res = db_query($qry, $params);
				while ($row = db_fetch($res)) {
					$partsContent = explode(':', $row['content']);

					$formFields[$partsContent[0]] = array();
					$formFields[$partsContent[0]]['type'] 		= $row['type'];
					$formFields[$partsContent[0]]['options'] 	= $row['options'];

					if (preg_match('/multiselect/', $row['additional_parameters'])) {
						$formFields[$partsContent[0]]['multiselect'] = true;
					} else {
						$formFields[$partsContent[0]]['multiselect'] = false;
					}
				}

				if (!empty($formFields)) {
					break;
				}
			}

			$partsTag = explode('~', $_GET['tag']);
			$i = 0;
			foreach ($partsTag as $partTag) {
				$partsTagSub = explode(':', $partTag);

				if (isset($formFields[$partsTagSub[0]])) {
					$i++;

					if (($list['list']['where_condition'] == '') AND ($i == 1)) {
						$list['list']['query'] .= "\n" . 'WHERE ';
					} else {
						$list['list']['query'] .= ' AND ';
					}

					$referenceTableShortcut = $mainTableShortcut;
					$referenceField 		= $partsTagSub[0];
					$caseMatch 				= 'LIKE';

					if (($formFields[$referenceField]['type'] == 'text') AND ($formFields[$referenceField]['options'] != '') AND (!in_array($formFields[$referenceField]['options'], array_keys(form_reserved_text_attributes())))) {
						$partsOptions = explode(':', $formFields[$referenceField]['options']);

						preg_match('/r{([a-z\d_]+)}/', $formFields[$referenceField]['options'], $matches);
						$referenceField = $matches[1];

						preg_match('/ ' . $partsOptions[0] . ' ([a-z_]+)/', $list['list']['query'], $matches);
						$referenceTableShortcut = $matches[1] . '.';
					} else {
						list($referenceTableShortcut, $referenceField) = list_determine_reference_table_shortcut_and_field($list, $referenceTableShortcut, $referenceField);

						// hier muss der ursprüngliche Name ($partsTagSub[0]) verwendet werden
						if ($formFields[$partsTagSub[0]]['type'] == 'select') {

							if ($formFields[$partsTagSub[0]]['multiselect']) {
								$caseMatch = 'JSON_CONTAINS';
							} else {
								$caseMatch = '=';
							}
						}
					}

					// soll so heißen wie angegeben, damit Query einfacher zu lesen ist
					$paramName 	= $partsTagSub[0] . '_search';
					$paramValue = $partsTagSub[1];

					if (in_array($caseMatch, array('=', 'LIKE'))) {
						$list['list']['query'] .= $referenceTableShortcut . $referenceField . ' ' . $caseMatch . ' :' . $paramName;

						if ($caseMatch == '=') {
							$list['list']['params'][$paramName] = $paramValue;
						} elseif ($caseMatch == 'LIKE') {
							$list['list']['params'][$paramName] = '%' . $paramValue . '%';
						}
					} elseif ($caseMatch == 'JSON_CONTAINS') {
						$list['list']['query'] .= 'JSON_CONTAINS(' . $referenceTableShortcut . $referenceField . ', :' . $paramName . ')';

						$list['list']['params'][$paramName] = $paramValue;
					}
				}
			}
		}

		return $list;
	}

	function list_add_query_limit($list)
	{
		$list['rows_per_page'] 		= 50;
		$list['number_of_datasets'] = list_get_number_of_datasets($list);

		if (isset($_GET['page'])) {
			$list['start'] = ($_GET['page'] - 1) * $list['rows_per_page'];

			if (($list['number_of_datasets'] <= $list['start']) OR ($list['start'] < 0)) {

				if (($list['number_of_datasets'] == 0) OR ($list['start'] < 0)) {
					header('Location: ' . hic_create_link(array(), array('prev_actions', 'sort', 'page', 'id')));
				} else {
					header('Location: ' . hic_create_link(array('page' => ($_GET['page'] - 1)), array()));
				}

				exit();
			}
		} else {
			$list['start'] = 0;
		}

		$list['list']['query'] .= "\n" . 'LIMIT ' . $list['start'] . ', ' . $list['rows_per_page'];

		return $list;
	}

	function list_add_query_order($list, $listLevel = 0)
	{
		$orders = array();

		if ((isset($_GET['sort'])) AND ($listLevel == 0)) {
			$partsSortMain = explode(',', $_GET['sort']);

			foreach ($partsSortMain as $partSortMain) {
				$partsSortSub = explode(':', $partSortMain);
				$orders[$partsSortSub[0]] = $partsSortSub[1];
			}
		}

		if ($list['list']['sort'] != '') {
			$partsSortMain = explode(',', $list['list']['sort']);
			foreach ($partsSortMain as $partSortMain) {
				$partsSortSub = explode(':', $partSortMain);

				if (!isset($orders[$partsSortSub[0]])) {
					$orders[$partsSortSub[0]] = $partsSortSub[1];
				}
			}
		}

		$order = '';
		foreach ($orders as $key => $value) {

			if ($order != '') {
				$order .= ', ';
			}

			// TODO: REMOVE HACK, EVENTUELL AUCH BUG, WENN STRING NICHT IMMER GLEICH ANFÄNGT
			if ($key == 'offer_identifier') {
				$order .= 'LENGTH(offer_identifier) ' . $value . ', offer_identifier ' . $value;
			} else {

				// TODO: REMOVE HACK
				if ($key == 'folder_number_main') {
					$key = 'CAST(folder_number_main AS UNSIGNED)';
				}

				$order .= $key . ' ' . $value;
			}
		}

		// TODO: VEREINHEITLICHEN MIT DARÜBER
		if (!isset($orders['id'])) {

			if ($order != '') {
				$order .= ', ';
			}

			preg_match('/^FROM ([a-z_]+)( [a-z_.]+)?/m', $list['list']['query'], $matches);

			if (isset($matches[2])) {
				$order .= trim($matches[2]) . '.';
			}

			$order .= 'id DESC';
		}

		$list['list']['query'] .= "\n" . 'ORDER BY ' . $order;

		return $list;
	}

	function list_create_content_title($application, $column, $row, $columnType)
	{
		$title = '';

		if ($columnType == 'normal') {

			if ($column['content_title'] != '') {

				if (isset($row[$column['content_title']])) {
					$case = htmlentities($row[$column['content_title']]);
				} else {
					$parts = explode(':', $column['content_title']);

					$functionName = hic_create_function_name($application, $parts[0]);

					if (function_exists($functionName)) {

						if (count($parts) == 1) {
							$case = call_user_func($functionName, $row);
						} else {
							$case = call_user_func($functionName, $row[$parts[1]]);
						}
					} else {
						$case = $column['content_title'];
					}
				}

				if ($case != '') {

					if (isset($row[$column['content_title']])) {
						$partsTitle = explode(':', $column['title']);

						if (isset($partsTitle[1])) {
							$columnName = $partsTitle[1] . ': ';
						} else {
							$columnName = $partsTitle[0] . ': ';
						}
					} else {
						$columnName = '';
					}

					$title = ' title="' . $columnName . $case . '"';
				}
			} elseif (($column['type'] == 'iconcolumn') AND ($column['content'] == 'toggle_subcontent')) {
				$partsTitle = explode(':', $column['title']);

				if (isset($partsTitle[1])) {
					$columnName = $partsTitle[1];
				} else {
					$columnName = $partsTitle[0];
				}

				$title = ' title="' . $columnName . '"';
			}
		}

		return $title;
	}

	function list_create_datarow_column($application, $column, $row, $datarowIn, $prevActions, $conditionalStyles)
	{
		$classes 			= array();
		$conditionalClasses = array();
		$colspan 			= '';
		$styles 			= array();

		$datarowColumn = array();

		if (isset($row['id'])) {
			$datarowColumn['id'] = $row['id'];
		}

		foreach ($conditionalStyles as $conditionalStyle) {

			if (check_qualifier($row, $conditionalStyle['qualifier'])['fulfilledAllQualifiers']) {
				$conditionalClasses[] = $conditionalStyle['style'];
			}
		}

		$datarowColumn['column_type'] = list_determine_column_type($column);
		$datarowColumn['title'] 	  = list_create_content_title($application, $column, $row, $datarowColumn['column_type']);
		$datarowColumn['output'] 	  = list_create_output($application, $column, $row, $datarowColumn['column_type'], $conditionalClasses);

		if (($datarowIn['action_show'] == 'toggle_subcontent') AND ($column['type'] != 'iconcolumn')) {
			$classes[] = 'toggleSubcontent';
			$classes[] = 'pointer';
		}

		if (($column['type'] == 'textcolumn') AND ($column['style'] != '')) {
			$partsStyle = explode(',', $column['style']);

			foreach ($partsStyle as $partStyle) {
				$partStyleSub = explode(':', $partStyle);

				if (count($partStyleSub) == 1) {
					$functionName = hic_create_function_name($application, $partStyleSub[0]);

					if (function_exists($functionName)) {
						$classes[] = call_user_func($functionName, $row);
					} else {
						$classes[] = $partStyleSub[0];
					}
				} elseif ($partStyleSub[0] == 'colspan') {
					$colspan = ' colspan="' . $partStyleSub[1] . '"';
				} else {
					$styles[] = $partStyleSub[0] . ':' . $partStyleSub[1] . ';';
				}
			}
		} elseif ($column['type'] == 'iconcolumn') {
			$classes[] = 'minimumWidth';
			$classes[] = 'alignCenter';
		}

		if (!empty($classes)) {
			$class = ' class="' . implode(' ', $classes) . '"';
		} else {
			$class = '';
		}

		if (!empty($conditionalClasses)) {
			$datarowColumn['column_link_class'] = ' class="' . implode(' ', $conditionalClasses) . '"';
		} else {
			$datarowColumn['column_link_class'] = '';
		}

		if (!empty($styles)) {
			$style = ' style="' . implode('', $styles) . '"';
		} else {
			$style = '';
		}

		$datarowColumn['td_style'] = $class . $colspan . $style;

		if (($column['type'] == 'iconcolumn') AND ($column['content'] == 'toggle_subcontent') AND (in_array('colorLegend', $classes) === false)) {
			$datarowColumn['access_action_show'] = false;
		} else {
			$datarowColumn['access_action_show'] = $datarowIn['access_action_show'];
		}

		$datarowColumn['column_link_attributes'] = '';
		if (filter_var($datarowColumn['output'], FILTER_VALIDATE_EMAIL)) {
			$datarowColumn['column_link'] = 'mailto:' . $datarowColumn['output'];
		} elseif (preg_match('/^http/', $datarowColumn['output'])) {
			$datarowColumn['column_link'] 			= $datarowColumn['output'];
			$datarowColumn['column_link_attributes'] 	= ' target="_blank" rel="noopener"';
		} else {

			if ($datarowIn['application_show'] == '') {
				$datarowIn['application_show'] = $application;
			}

			$linkParams = array();
			$linkParams['application'] 	= $datarowIn['application_show'];
			$linkParams['action'] 		= $datarowIn['action_show'];

			if ($application != $datarowIn['application_show']) {
				$linkParams['prev_applications'] = $application;
			}

			$linkParams['prev_actions'] = implode(',', $prevActions);

			$datarowColumn['column_link'] = hic_create_link($linkParams, array(), $datarowIn['action_parameters']);
		}

		return $datarowColumn;
	}

	function list_create_datarow_databuttons($application, $action, $prevActions, $list, $row, $datarow)
	{
		global $actionButtons;

		$applicationShow = $datarow['application_show'];
		$actionShow 	 = $datarow['action_show'];

		if (!isset($actionButtons[$actionShow])) {
			// TODO: QUALIFIER_EXCEPTION IMPLEMENTIEREN
			$qry = 'SELECT title,
						options,
						style,
						qualifier
					FROM form_' . $applicationShow . '
					WHERE action REGEXP :action AND
						type = "button"';

			$params 		  = array();
			$params['action'] = '(^|,)' . $actionShow . '(,|$)';

			$re = db_query($qry, $params);
			$actionButtons[$actionShow] = array();
			while ($ro = db_fetch($re)) {
				$actionButtons[$actionShow][] = $ro;
			}
		}

		$databuttons 				= array();
		$databuttons['column_type'] = 'databuttons';
		$databuttons['databuttons'] = array();

		$i = 0;
		foreach ($actionButtons[$actionShow] as $actionButton) {
			list($show, $checkedAction) = check_action_access($application, $action, $applicationShow, $actionButton['options'], $row);

			if ($show) {
				$show = check_qualifier($row, $actionButton['qualifier']);

				if ($show['fulfilledAllQualifiers']) {
					$parametersToSet 					= array();
					$parametersToSet['action'] 			= $actionButton['options'];
					$parametersToSet['prev_actions'] 	= implode(',', $prevActions);

					$databuttons['databuttons'][$i]['link'] = hic_create_link($parametersToSet, array(), $datarow['action_parameters']);

					if ($checkedAction['onclick'] != '') {

						if ($checkedAction['onclick'] == 'blank') {
							$databuttons['databuttons'][$i]['options'] = ' target="_blank" rel="nofollow"';
						} else {
							$databuttons['databuttons'][$i]['options'] = ' onclick="' . $checkedAction['onclick'] . '"';
						}
					} else {
						$databuttons['databuttons'][$i]['options'] = '';
					}

					$databuttons['databuttons'][$i]['title'] = $actionButton['title'];

					if ($actionButton['style'] == '') {

						if ($actionButton['title'] == 'Bearbeiten') {
							$databuttons['databuttons'][$i]['style'] = 'icon_edit';
						} elseif ($actionButton['title'] == 'Löschen') {
							$databuttons['databuttons'][$i]['style'] = 'icon_delete';
						}
					} else {
						$databuttons['databuttons'][$i]['style'] = $actionButton['style'];
					}

					$databuttons['databuttons'][$i]['alt'] = ucwords(str_replace('_', ' ', $actionButton['style']));
				}
			}

			$i++;
		}

		return $databuttons;
	}

	function list_create_datarow_tr_class($list, $listLevel, $datarowCounter, $row)
	{
		$rowclasses = array();

		if ($list['list']['style'] != '') {
			$rowclasses[] = $list['list']['style'];
		}

		if ($listLevel == 0) {

			if (($datarowCounter + 1) & 1) {
				$rowclasses[] = 'odd';
			}
		} else {
			$rowclass = '';

			for($i = 1; $i <= $listLevel; $i++) {
				$rowclass .= 'sub';
			}

			$rowclasses[] = $rowclass;
		}

		foreach ($list['rowclasses'] as $rowclass) {

			if (check_qualifier($row, $rowclass['qualifier'])['fulfilledAllQualifiers']) {
				$rowclasses[] = $rowclass['style'];
			}
		}

		if (!empty($rowclasses)) {
			$trClass = ' class="' . implode(' ', $rowclasses) . '"';
		} else {
			$trClass = '';
		}

		return $trClass;
	}

	function list_create_datarows($application, $action, $listAction = '', $mainList = array(), $listLevel = 0, $parentRow = array())
	{
		if ($listAction == '') {
			$listAction = $action;
		}

		$currentList = list_get_list($application, $listAction, array('listLevel' => $listLevel, 'datarow' => $parentRow));
		$currentList = list_add_query_order($currentList, $listLevel);

		if ($listLevel == 0) {
			$currentList = list_add_query_limit($currentList);

			$mainList = $currentList;
		}

		$res = db_query($currentList['list']['query'], $currentList['list']['params']);
		while ($row = db_fetch($res)) {
			$datarow = array();

			$datarow['tr_class'] = list_create_datarow_tr_class($currentList, $listLevel, $mainList['datarow_counter'], $row);

			$actionShow 	  = '';
			$accessActionShow = false;
			if ($currentList['list']['action_show'] != '') {

				if ($currentList['list']['action_show'] != 'toggle_subcontent') {
					$partsActionShow = explode(',', $currentList['list']['action_show']);
					foreach ($partsActionShow as $partActionShow) {
						list($accessActionShow) = check_action_access($application, $action, $currentList['list']['application_show'], $partActionShow, $row);

						if ($accessActionShow) {
							$actionShow = $partActionShow;
							break;
						}
					}
				} else {
					$actionShow = 'toggle_subcontent';
				}
			}

			$datarow['application_show']   = $currentList['list']['application_show'];
			$datarow['action_show'] 	   = $actionShow;
			$datarow['access_action_show'] = $accessActionShow;

			$datarow['action_parameters'] = array();
			foreach ($currentList['list']['action_parameters'] as $actionParameter) {

				if (isset($row[$actionParameter])) {
					$datarow['action_parameters'][$actionParameter] = $row[$actionParameter];
				}
			}

			$prevActions = array($action);

			$databuttons = list_create_datarow_databuttons($application, $action, $prevActions, $currentList, $row, $datarow);

			if ($listLevel == 0) {

				if (empty($databuttons['databuttons'])) {
					$mainList['list']['found_databuttons'] = false;
				} else {
					$mainList['list']['found_databuttons'] = true;
				}
			}

			foreach ($currentList['columns'] as $column) {
				$fulfilledAllQualifiers = false;

				if ($column['qualifier'] != '') {

					if (preg_match('/found_databuttons/', $column['qualifier'])) {
						$partsQualifier = explode(':', $column['qualifier']);
						if ((count($partsQualifier) == 1) AND (!empty($databuttons))) { // Fall found_databuttons
							$fulfilledAllQualifiers = true;
						} elseif ((count($partsQualifier) == 2) AND (empty($databuttons))) { // Fall found_databuttons:false
							$fulfilledAllQualifiers = true;
						}
					} else {
						$fulfilledAllQualifiers = check_qualifier($row, $column['qualifier'])['fulfilledAllQualifiers'];
					}
				} else {
					$fulfilledAllQualifiers = true;
				}

				if ($fulfilledAllQualifiers) {
					$datarow['columns'][] = list_create_datarow_column($application, $column, $row, $datarow, $prevActions, $mainList['conditional_styles']);
				}
			}

			$datarow['columns'][] = $databuttons;

			$mainList['datarows'][] = $datarow;

			if ($listLevel == 0) {
				$mainList['datarow_counter']++;
			}

			if ($currentList['list']['subcontent'] != '') {
				list($sublistAccess) = check_action_access($application, $action, $application, $currentList['list']['subcontent'], $row);

				if ($sublistAccess) {
					$nextListLevel = $listLevel + 1;

					$mainList = list_create_datarows($application, $action, $currentList['list']['subcontent'], $mainList, $nextListLevel, $row);
				}
			}
		}

		return $mainList;
	}

	function list_create_filter($list)
	{
		$filter 		= array();
		$activeFilters 	= array();

		if (isset($_GET['filter'])) {

			$partsFilter = explode('~', $_GET['filter']);
			foreach ($partsFilter as $partFilter) {
				$partsFilterSub = explode(':', $partFilter);
				$activeFilters[$partsFilterSub[0]] = $partsFilterSub[1];
			}
		}

		$displayedGroupIds = array();
		$i = 0;
		foreach ($list['columns'] as $column) {
			$showColumn = true;

			if ($column['group_id'] > 0) {

				if (in_array($column['group_id'], $displayedGroupIds)) {
					$showColumn = false;
				} else {
					$displayedGroupIds[] = $column['group_id'];
				}
			}

			if ($showColumn) {

				if (preg_match('/colorLegend/', $column['style'])) {
					$filter[$i]['class'] = ' class="colorLegend"';
				} else {
					$filter[$i]['class'] = '';
				}

				if ($column['filter'] != '') {
					$filter[$i]['title_long'] = $column['title_long'];
					$filter[$i]['title_long_output'] = str_replace(' anzeigen', '', $column['title_long']);

					// TODO: VEREINHEITLICHEN MIT LIST_CREATE_WRAPPER
					$colspan = '';
					if (($column['type'] == 'textcolumn') AND ($column['style'] != '')) {
						$partsStyle = explode(',', $column['style']);

						foreach ($partsStyle as $partStyle) {
							$partsStyleSub = explode(':', $partStyle);

							// WIRD AKTUELL NICHT GENUTZT
							if ($partsStyleSub[0] == 'colspan') {
								$colspan = ' colspan="' . $partsStyleSub[1] . '"';
							}
						}
					}

					if ($colspan != '') {
						$filter[$i]['style'] = $colspan;
					} else {
						$filter[$i]['style'] = '';
					}

					$partsFilter = explode(':', $column['filter']);

					if (($partsFilter[0] == '1') OR ($partsFilter[0] == 'true') OR ($column['filter'] == 'disabled')) {
						$filter[$i]['filter_type'] = 'text';

						$content = list_create_filter_field_name($list, $column['content'], $filter[$i]['filter_type']);
						if (isset($activeFilters[$content])) {
							$filter[$i]['value'] = $activeFilters[$content];
						} else {
							$filter[$i]['value'] = '';
						}

						if ($column['filter'] == 'disabled') {
							$filter[$i]['disabled'] = ' disabled';
						} else {
							$filter[$i]['disabled'] = '';
						}
					} else {
						$filter[$i]['filter_type'] = 'select';

						$filter[$i]['select_options'] = array();
						$filter[$i]['select_options'][''] = '&nbsp;';
						$filter[$i]['select_options'] += hic_get_select_options($column['filter']);

						$content = list_create_filter_field_name($list, $column['content'], $filter[$i]['filter_type']);
						if (isset($activeFilters[$content])) {
							$filter[$i]['selected_value'] = $activeFilters[$content];
						} else {
							$filter[$i]['selected_value'] = '';
						}
					}

					$filter[$i]['fieldname'] = form_create_fieldname($column['id'], $filter[$i]['title_long']);
				} else {
					$filter[$i]['filter_type'] = false;
				}

				$i++;
			}
		}

		return $filter;
	}

	function list_create_filter_field_name($list, $content, $filterType)
	{
		if ($content == 'toggle_subcontent') {

			if (preg_match('/([a-z_]+) AS subcontent/', $list['list']['query'], $matches)) {
				$content = $matches[1];
			} else {
				$content = 'subcontent';
			}
		} else {
			$partsContent = explode(':', $content);

			if (isset($partsContent[1])) {
				$content = $partsContent[1];
			} else {
				$content = $partsContent[0];
			}

			// TODO: ALLGEMEIN FÜR ALLE TYP CHECKBOX UMSTELLEN
			if ($content == 'active_resolved') {
				$content = 'active';
			} elseif ($content == 'app_active_resolved') {
				$content = 'app_active';
			}

			// TODO: REMOVE HACK
			if ($filterType == 'select') {
				$content = preg_replace('/_resolved_(.+)/', '_id', $content);
				$content = preg_replace('/_formatted/', '', $content);
			}

			// TODO: REMOVE HACK 19021 INVOICES / LIST_BOOKED_SUPERUSER
			if ($content == 'approval_user_id') {
				$content = 'approval_user_id_filter';
			}
		}

		return $content;
	}

	function list_create_list_info($list)
	{
		$listInfo 		   = array();
		$listInfo['start'] = $list['start'] + 1;
		$listInfo['end']   = min(array($list['start'] + $list['rows_per_page'], $list['number_of_datasets']));

		return $listInfo;
	}

	function list_create_list_query($application, $rowList, $datarow = array())
	{
		$partsContent = preg_split('~"[^"]*"(*SKIP)(*F)|,~', $rowList['content']);

		if ($partsContent[0][0] != '"') {

			if (!preg_match('~^data_~', $partsContent[0])) {
				$qry = 'SELECT content FROM list_' . $application . ' WHERE action = :action AND type = "list"';

				$params 		  = array();
				$params['action'] = $partsContent[0];

				$res = db_query($qry, $params);
				$row = db_fetch($res);

				$partsContent = preg_split('/"[^"]*"(*SKIP)(*F)|,/', $row['content']);
			}
		}

		$listQuery = list_create_list_query_generate_query($application, $partsContent[0]);
		#$listQuery = str_replace('"', '', $partsContent[0]);

		// bei load_external_comments nicht gesetzt
		if ((isset($rowList['filter'])) AND ($rowList['filter'] != '')) {
			$listQuery = list_add_query_condition($listQuery, $rowList['filter']);
		}

		$listQuery = hic_implode_vars($listQuery, $datarow);

		$return   = array();
		$return[] = $listQuery;
		$return[] = $partsContent;

		return $return;
	}

	function list_create_list_query_generate_query($application, $listContent)
	{
		// generate query or add missing columns
		if (preg_match('~^data_~', $listContent)) {
			$isQuery = false;
		} else {
			$isQuery = true;
		}

		$qry = 'SELECT content FROM list_' . $application . ' WHERE type LIKE "%column"';

		$res  = db_query($qry);
		$rows = db_fetch_all($res);

		$fieldsToSelect = array_column($rows, 'content');

		foreach ($fieldsToSelect as $fieldToSelect) {

			if (preg_match('~_formatted$~', $fieldToSelect)) {

				if (preg_match('~_time_formatted$~', $fieldToSelect)) {
					$dateFormat = '%H:%i Uhr';
				} else {
					$dateFormat = '%d.%m.%Y';
				}

				$dbFieldname   = preg_replace('~_time_formatted$|_formatted$~', '', $fieldToSelect);
				$fieldToSelect = 'DATE_FORMAT(' . $dbFieldname . ', \'' . $dateFormat . '\') AS ' . $fieldToSelect;
			}

			if ($isQuery) {
				if (!preg_match("~\b" . $fieldToSelect . "\b~", $listContent)) {
					$fieldsToAppend[] = $fieldToSelect;
				}
			} else {
				$fieldsToAppend[] = $fieldToSelect;
			}
		}

		if ($isQuery) {
			if (!preg_match("~\bid\b~", $listContent)) {
				$fieldsToAppend[] = "id";
			}
			$listQuery = $listContent;
			if(!preg_match("~\bJOIN|IF\b~", $listQuery)) {
				if(isset($fieldsToAppend)) {
					$listQuery = explode("FROM", $listQuery);
					$fields = ",\n" . implode(',' . "\n", $fieldsToAppend);
					$listQuery[0] .= $fields;
					$listQuery = $listQuery[0] . " \nFROM" . $listQuery[1];
				}
				//echo $listQuery;
			}	
			/*
				append fields here
			*/
		} else {
			$listQuery = 'SELECT id,' . "\n";
			$listQuery .= implode(',' . "\n", $fieldsToAppend);
			$listQuery .= "\n" . 'FROM ' . $listContent;
		}

		$listQuery = str_replace('"', '', $listQuery);

		return $listQuery;
	}

	function list_create_output($application, $column, $row, $columnType, $conditionalClasses)
	{
		$output = '';

		if ($column['type'] == 'textcolumn') {

			if (isset($row[$column['content']])) {
				$output = $row[$column['content']];
			} else {
				$parts = explode(':', $column['content']);

				$functionName = hic_create_function_name($application, $parts[0]);

				if (function_exists($functionName)) {

					if (count($parts) == 1) {
						$output = call_user_func($functionName, $row);
					} else {
						$output = call_user_func($functionName, $row[$parts[1]]);
					}
				}
			}
		} elseif ($column['type'] == 'iconcolumn') {
			$show = false;

			if ($column['content'] == 'toggle_subcontent') {

				if ($row['subcontent'] > 0) {
					$show = true;
				}
			} elseif ($row[$column['content']] != '') {
				$show = true;
			}

			if ($show) {
				$classes = array();

				if ($column['content'] == 'toggle_subcontent') {
					$classes[] = 'toggleSubcontent';
					$classes[] = 'pointer';
				}

				$iconColors 							= array();
				$iconColors['fas fa-comment-dots'] 		= '#00b349';
				$iconColors['fas fa-level-down-alt'] 	= list_determine_level_down_alt_color();

				$partsStyle = explode(':', $column['style']);

				foreach (array_slice($partsStyle, 1) as $partStyle) {
					preg_match('/([c]{1}){([a-f\d#]+)}/i', $partStyle, $matches);

					if ($matches[1] == 'c') {
						$style = ' style="color:' . $matches[2] . '"';
					}
				}

				if (!isset($style)) {

					if (isset($iconColors[$partsStyle[0]])) {
						$style = ' style="color:' . $iconColors[$partsStyle[0]] . '"';
					} else {
						$style = '';
					}
				}

				$classes[] = $partsStyle[0];

				$classes = array_merge($classes, $conditionalClasses);

				if ($columnType == 'externalComment') {
					$classes[] 	= 'loadExternalComments';
					$data 		= ' data-columnid="' . $column['id'] . '"';
				} else {
					$data = '';
				}

				$icon = '<i class="' . implode(' ', $classes) . '"' . $style . $data . '></i>';

				if ($columnType == 'openFile') {
					$output = '<a href="' . hic_create_file_link($application, $row[$column['content']]) . '" target="_blank">' . $icon . '</a>';
				} else {
					$output = $icon;
				}
			}
		} else {
			echo 'Functions_List.php: Unknown columntype "' . $column['type'] . '"!';
			die();
		}

		return $output;
	}

	function list_create_pager_item($title, $page, $currentPage)
	{
		$pagerItem = array();

		$pagerItem['link'] = hic_create_link(array('page' => $page));
		// Klassen bei Pfeilen nach links und rechts nicht ergänzen
		if (($page == $currentPage) AND (is_int($title))) {
			$pagerItem['class'] = 'pagerItemActive';
		} else {
			$pagerItem['class'] = 'pagerItem';
		}
		$pagerItem['title'] = $title;

		return $pagerItem;
	}

	function list_create_pager_items($list)
	{
		$maxPagerItems 		   = 17;
		$showedPagerItemsLeft  = 0;
		$showedPagerItemsRight = 0;

		$currentPage = ($list['start'] / $list['rows_per_page']) + 1;
		$numberOfPages = ceil($list['number_of_datasets'] / $list['rows_per_page']);

		$pagerPages = array();

		$pager[] = list_create_pager_item('&lt;', max(array(($list['start'] / $list['rows_per_page']), 1)), $currentPage);

		// ermitten, wie viele Navigationspunkte links und rechts neben der aktuellen Seite angezeigt werden sollen
		$navigationItemsPerSide = ($maxPagerItems-1)/2;

		// ermitteln, wie viele Navigationspunkte zwischen der ersten und der aktuellen Seite liegen
		$lowerDelta = $currentPage-1;

		// ermitteln, wie viele Navigationspunkte links von der aktuellen Seite noch übrig sind, damit diese rechts von der aktuellen Seite hinzugerechnet werden
		$additionalNavigationItemsForUpperSide = $navigationItemsPerSide-$lowerDelta;
		if ($additionalNavigationItemsForUpperSide < 0) {
			$additionalNavigationItemsForUpperSide = 0;
		}

		// ermitteln, wie viele Navigationspunkte zwischen der letzten und der aktuellen Seite liegen
		$upperDelta = $numberOfPages-$currentPage;

		// ermitteln, wie viele Navigationspunkte rechts von der aktuellen Seite noch übrig sind, damit diese links von der aktuellen Seite hinzugerechnet werden
		$additionalNavigationItemsForLowerSide = $navigationItemsPerSide-$upperDelta;
		if ($additionalNavigationItemsForLowerSide < 0) {
			$additionalNavigationItemsForLowerSide = 0;
		}

		// erste Seite und Spacer anzeigen
		if (($lowerDelta-$additionalNavigationItemsForLowerSide) > $navigationItemsPerSide) {
			$pager[] = list_create_pager_item(1, 1, $currentPage);
			$pager[] = list_create_pager_item('...', '', $currentPage);
			$showedPagerItemsLeft = 2;
		}

		if (($upperDelta-$additionalNavigationItemsForUpperSide) > $navigationItemsPerSide) {
			$showedPagerItemsRight = 2;
		}

		// Seiten links von aktueller Seite anzeigen
		$itemsToShowLower = min(array($lowerDelta, $navigationItemsPerSide));
		for($i=1;$i<=$itemsToShowLower+$additionalNavigationItemsForLowerSide-$showedPagerItemsLeft;$i++) {
			$page = $currentPage-($itemsToShowLower+$additionalNavigationItemsForLowerSide-$showedPagerItemsLeft)+$i-1;

			if ($page > 0) {
				$pager[] = list_create_pager_item($page, $page, $currentPage);
			}
		}

		// aktuelle Seite anzeigen
		$pager[] = list_create_pager_item($currentPage, $currentPage, $currentPage);

		// Seiten rechts von aktueller Seite anzeigen
		$itemsToShowUpper = min(array($upperDelta, $navigationItemsPerSide));
		for($i=1;$i<=$itemsToShowUpper+$additionalNavigationItemsForUpperSide-$showedPagerItemsRight;$i++) {
			$page = $currentPage+$i;

			if ($page <= $numberOfPages) {
				$pager[] = list_create_pager_item($page, $page, $currentPage);
			}
		}

		// Spacer und letzte Seite anzeigen
		if (($upperDelta-$additionalNavigationItemsForUpperSide) > $navigationItemsPerSide) {
			$pager[] = list_create_pager_item('...', '', $currentPage);
			$pager[] = list_create_pager_item($numberOfPages, $numberOfPages, $currentPage);
		}

		$pager[] = list_create_pager_item('&gt;', min(array((($list['start'] / $list['rows_per_page']) + 2), $numberOfPages)), $currentPage);

		return $pager;
	}

	function list_create_wrapper_columns($list)
	{
		$allowedClasses   = array();
		$allowedClasses[] = 'alignCenter';
		$allowedClasses[] = 'alignRight';
		$allowedClasses[] = 'colorLegend';
		$allowedClasses[] = 'fullWrapper';

		$wrapperColumns = array();

		$displayedGroupIds = array();
		$i = 0;
		foreach ($list['columns'] as $column) {
			$showColumn = true;

			if ($column['group_id'] > 0) {

				if (in_array($column['group_id'], $displayedGroupIds)) {
					$showColumn = false;
				} else {
					$displayedGroupIds[] = $column['group_id'];
				}
			}

			if ($showColumn) {
				$activeColumn = false;

				if ($column['sort'] != '') {
					$partsSortMain = explode(',', $column['sort']);

					$sortFields = array();
					foreach ($partsSortMain as $partSortMain) {
						$partsSortSub = explode(':', $partSortMain);
						$sortFields[] = $partsSortSub[0];
						$newSortOrder = $partsSortSub[1];
					}

					if (isset($_GET['sort'])) {
						$parts = explode(',', $_GET['sort']);
					} else {
						$parts = explode(',', $list['list']['sort']);
					}
					$caseCurrentSort = $parts[0];

					$partsCurrentSort = explode(':', $caseCurrentSort);
					if ($partsCurrentSort[0] == $sortFields[0]) {
						$activeColumn = true;

						if ($partsCurrentSort[1] == 'ASC') {
							$newSortOrder = 'DESC';
						} else {
							$newSortOrder = 'ASC';
						}
					}

					$sort = '';
					foreach ($sortFields as $sortField) {

						if ($sort != '') {
							$sort .= ',';
						}

						$sort .= $sortField . ':' . $newSortOrder;
					}

					$wrapperColumns[$i]['link'] = hic_create_link(array('sort' => $sort));
				} else {
					$wrapperColumns[$i]['link'] = '';
				}

				$wrapperColumns[$i]['title_short'] = $column['title_short'];
				$wrapperColumns[$i]['title_long']  = $column['title_long'];

				$colspan = '';
				$classes = array();
				if (($column['type'] == 'textcolumn') AND ($column['style'] != '')) {
					$partsStyle = explode(',', $column['style']);

					foreach ($partsStyle as $partStyle) {
						$partsStyleSub = explode(':', $partStyle);

						// WIRD AKTUELL NICHT GENUTZT
						if ($partsStyleSub[0] == 'colspan') {
							$colspan = ' colspan="' . $partsStyleSub[1] . '"';
						} elseif (in_array($partStyle, $allowedClasses)) {
							$classes[] = $partStyle;
						}
					}
				} elseif ($column['type'] == 'iconcolumn') {
					$classes[] = 'alignCenter';
				}

				if ($activeColumn) {
					$classes[] = 'active';
				}

				if (!empty($classes)) {
					$wrapperColumns[$i]['class'] = ' class="' . implode(' ', $classes) . '"';
				} else {
					$wrapperColumns[$i]['class'] = '';
				}

				if ($colspan != '') {
					$wrapperColumns[$i]['style'] = $colspan;
				} else {
					$wrapperColumns[$i]['style'] = '';
				}

				$i++;
			}
		}

		return $wrapperColumns;
	}

	function list_determine_column_type($column)
	{
		$columnType = 'normal';

		if ($column['type'] == 'iconcolumn') {

			if (preg_match('/load_external_comments/', $column['content_title'])) {
				$columnType = 'externalComment';
			} elseif (preg_match('/open_file/', $column['content_title'])) {
				$columnType = 'openFile';
			}
		}

		return $columnType;
	}

	function list_determine_filter_type($filter)
	{
		$partsFilter = explode(':', $filter);

		if (($partsFilter[0] == '1') OR ($partsFilter[0] == 'true')) {
			$filterType = 'text';
		} else {
			$filterType = 'select';
		}

		return $filterType;
	}

	function list_determine_level_down_alt_color()
	{
		if (RESELLER_NAME == 'ventus') {
			$levelDownAltColor = '#25a9e1';
		} elseif (RESELLER_NAME == 'Werkules') {
			$levelDownAltColor = SECONDARY_COLOR;
		}

		return $levelDownAltColor;
	}

	function list_determine_reference_table_shortcut_and_field($list, $referenceTableShortcut, $referenceField)
	{
		if (preg_match('/([a-z_]+)\.([a-z_]+) AS \b' . $referenceField . '\b/', $list['list']['query'], $matches)) {
			$referenceTableShortcut = $matches[1] . '.';
			$referenceField 		= $matches[2];
		} elseif (preg_match('/(.+) AS \b' . $referenceField . '\b/', $list['list']['query'], $matches)) {
			$referenceTableShortcut = '';
			$referenceField 		= $matches[1];
		} elseif (preg_match('/([a-z_]+)\.' . $referenceField . '\b/', $list['list']['query'], $matches)) {
			$referenceTableShortcut = $matches[1] . '.';
		}

		$return 	= array();
		$return[] 	= $referenceTableShortcut;
		$return[] 	= $referenceField;

		return $return;
	}

	function list_encapsulate_where_condition($query, $whereCondition)
	{
		// TODO: ÜBERPRÜFEN, OB OR BEREITS GEKAPSELT IST -> DANN NICHT NOCHMAL KAPSELN
		if (((!preg_match('/^\(/', $whereCondition)) OR (!preg_match('/\)$/', $whereCondition))) AND (preg_match('/\bOR\b/', $whereCondition))) {
			$query = str_replace($whereCondition, '(' . $whereCondition . ')', $query);
		}

		return $query;
	}

	function list_get_list($application, $action, $options = array())
	{
		$listLevel 		  = 0;
		$datarow 		  = array();
		$typesToSelect 	  = array();
		$addSearchTags 	  = true;
		$checkFieldAccess = true;

		foreach ($options as $optionKey => $optionValue) {
			${$optionKey} = $optionValue;
		}

		$list = array();

		$list['list'] 				= array();
		$list['listbuttons'] 		= array();
		$list['columns'] 			= array();
		$list['filter'] 			= array();
		$list['rowclasses'] 		= array();
		$list['quickinfo'] 			= '';
		$list['conditional_styles'] = array();
		$list['datarows'] 			= array();
		$list['datarow_counter'] 	= 0;

		$qryAddition = '';

		if (!empty($typesToSelect)) {
			$qryAddition .= ' AND ';

			if (count($typesToSelect) > 1) {
				$qryAddition .= '(';
			}

			$i = 0;
			foreach ($typesToSelect as $typeToSelect) {
				$i++;

				if ($i > 1) {
					$qryAddition .= ' OR ';
				}

				$qryAddition .= 'type = "' . $typeToSelect . '"';
			}

			if (count($typesToSelect) > 1) {
				$qryAddition .= ')';
			}
		}

		$qry = 'SELECT *
				FROM list_' . $application . '
				WHERE (action REGEXP :action OR
					action = "")' . $qryAddition . '
				ORDER BY id ASC';

		$params 		  = array();
		$params['action'] = '(^|,)' . $action . '(,|$)';

		$res = db_query($qry, $params);
		while ($row = db_fetch($res)) {
			$access = true;

			if ($checkFieldAccess) {

				if ($row['accesslevel'] != '') {
					list($access, $rowAccesslevel) = check_field_access($application, $action, $row['accesslevel']);
				}
			}

			if ($access) {

				if ($row['type'] == 'list') {

					if ($action == 'list_quicksearch') {
						$list['list']['title'] = hic_implode_vars($row['title'], array(), true);
					} else {
						$list['list']['title'] = hic_implode_vars($row['title']);
					}

					list($list['list']['query'], $partsContent) = list_create_list_query($application, $row, $datarow);

					$list['list']['qualifier'] = $row['qualifier'];
					$list['list']['params']    = array();

					if (($listLevel == 0) AND ($addSearchTags)) {

						if (isset($_GET['tag'])) {
							$list = list_add_query_condition_search($application, $action, $list);
						}

						if (isset($_GET['filter'])) {
							$list = list_add_query_condition_filter($application, $action, $list);
						}
					}

					$partsContentTitle = explode(':', $row['content_title']);
					$list['list']['action_show'] = $partsContentTitle[0];

					$list['list']['application_show'] 	 = $application;
					$list['list']['action_parameters'][] = 'id';

					if (count($partsContentTitle) > 1) {

						// TODO: ZUSAMMENFASSEN MIT DARUNTER UND MEHRERE PARAMETER AUF EINMAL ERMÖGLICHEN
						if (preg_match('/p{([a-z_,]+)}/', $partsContentTitle[1], $matches)) {
							$actionParameters = explode(',', $matches[1]);
							$list['list']['action_parameters'] = array();
							foreach ($actionParameters as $actionParameter) {
								$list['list']['action_parameters'][] = $actionParameter;
							}
						}

						if (preg_match('/a{([a-z_]+)}/', $partsContentTitle[1], $matches)) {
							$list['list']['application_show'] = $matches[1];
						}
					}

					$list['list']['sort'] 	= $row['sort'];
					$list['list']['style'] 	= $row['style'];

					if (count($partsContent) > 1) {
						$list['list']['subcontent'] = $partsContent[1];
					} else {
						$list['list']['subcontent'] = '';
					}

					$list['list']['has_filters'] = false;
				} elseif ($row['type'] == 'quickinfo') {
					$list['list']['where_condition'] = list_get_where_condition($list['list']['query']);

					if ($row['content'][0] == '"') {
						$qry = substr($row['content'], 1, strlen($row['content'])-2);

						if ($list['list']['where_condition'] != '') {
							$qry = list_add_query_condition($qry, $list['list']['where_condition']);
						}

						$re = db_query($qry, $list['list']['params']);
						$ro = db_fetch($re);
						$list['quickinfo'] .= $row['title'] . ': ' . format_currency_output($ro['value']);
					} else {
						$functionName = hic_create_function_name($application, $row['content']);

						if (function_exists($functionName)) {
							$value = call_user_func($functionName, $list);

							if ($value) {
								$list['quickinfo'] .= $row['title'] . ': '. $value;
							}
						}
					}
				} elseif ($row['type'] == 'rowclass') {
					$list['rowclasses'][$row['id']]['style'] 	 = $row['style'];
					$list['rowclasses'][$row['id']]['qualifier'] = $row['qualifier'];
				} elseif (($row['type'] == 'textcolumn') OR ($row['type'] == 'iconcolumn')) {
					$list['columns'][$row['id']]['id'] 		 = $row['id'];
					$list['columns'][$row['id']]['group_id'] = $row['group_id'];
					$list['columns'][$row['id']]['type'] 	 = $row['type'];
					$list['columns'][$row['id']]['title'] 	 = $row['title'];

					$partsTitle = explode(':', $row['title']);
					$list['columns'][$row['id']]['title_short'] = $partsTitle[0];
					if (isset($partsTitle[1])) {
						$list['columns'][$row['id']]['title_long'] = $partsTitle[1];
					} else {
						$list['columns'][$row['id']]['title_long'] = $partsTitle[0];
					}

					$list['columns'][$row['id']]['content'] 	  = $row['content'];
					$list['columns'][$row['id']]['content_title'] = $row['content_title'];
					$list['columns'][$row['id']]['sort'] 		  = $row['sort'];
					$list['columns'][$row['id']]['style'] 		  = $row['style'];
					$list['columns'][$row['id']]['qualifier'] 	  = $row['qualifier'];
					$list['columns'][$row['id']]['filter'] 		  = $row['filter'];

					// TODO: HIER MÜSSTE NOCH ABGEFRAGT WERDEN, OB DIE SPALTE MIT DEM FILTER AUCH WIRKLICH SICHTBAR IST ODER DER QUALIFIER NICHT ERFÜLLT IST
					if ($row['filter'] != '') {
						$list['list']['has_filters'] = true;
					}
				} elseif ($row['type'] == 'filter') {
					$list['filter'][$row['id']]['content'] = $row['content'];
				} elseif ($row['type'] == 'listbutton') {
					list($show) = check_action_access($application, $action, $application, $row['content']);

					if ($show) {
						$list['listbuttons'][$row['id']]['title'] = $row['title'];
						$list['listbuttons'][$row['id']]['link']  = hic_create_link(array('application' => $application, 'action' => $row['content'], 'prev_actions' => $action), 'allButSetParameters');
					}
				} elseif ($row['type'] == 'conditional_style') {
					$conditionalStyle 			   = array();
					$conditionalStyle['style'] 	   = $row['style'];
					$conditionalStyle['qualifier'] = $row['qualifier'];

					$list['conditional_styles'][$row['id']] = $conditionalStyle;
				}
			}
		}

		return $list;
	}

	function list_get_next_dataset($qryAddition = '')
	{
		$prevActions = explode(',', $_GET['prev_actions']);

		$listAction = $prevActions[0];

		$list = list_get_list($_GET['application'], $listAction, array('typesToSelect' => array('list')));
		$list['list']['query'] = list_add_query_condition($list['list']['query'], 'id > ' . $_GET['id']);
		$list = list_add_query_order($list);
		$list['list']['query'] = $list['list']['query'] . "\n" . 'LIMIT 1';

		$res = db_query($list['list']['query'], $list['list']['params']);
		$row = db_fetch($res);
	}

	function list_get_number_of_datasets($list)
	{
		// TODO: UMSTELLEN, DASS FELDER IN QUERY NEBEN ANZ NICHT ZUSÄTZLICH AUSGELESEN WERDEN
		if (preg_match('/GROUP BY ([a-z_\.]+)/', $list['list']['query'], $matches)) {
			$qry = preg_replace('/^SELECT/', 'SELECT COUNT(DISTINCT ' . $matches[1] . ') AS anz,' . "\n", $list['list']['query']);

			if (!preg_match('/HAVING/', $qry)) {
				$qry = preg_replace('/GROUP BY.+/', '', $qry);
			}
		} else {

			if (preg_match('/SELECT DISTINCT/', $list['list']['query'])) {
				$qry = preg_replace('/SELECT DISTINCT\((.+)\).+FROM/s', 'SELECT COUNT(DISTINCT($1)) AS anz FROM', $list['list']['query']);
			} else {
				$qry = preg_replace('/^SELECT/', 'SELECT COUNT(1) AS anz,' . "\n", $list['list']['query']);
			}
		}

		$res = db_query($qry, $list['list']['params']);
		$row = db_fetch($res);

		if (isset($row['anz'])) {
			return $row['anz'];
		} else {
			return 0;
		}
	}

	function list_get_where_condition($query)
	{
		if (preg_match('/^WHERE (.+)/ms', $query, $matches)) {
			$whereCondition = $matches[1];
		} else {
			$whereCondition = '';
		}

		return $whereCondition;
	}

	function list_main($application, $action)
	{
		if (!empty($_POST)) {
			$list = list_get_list($application, $action);

			list_redirect($list);

			exit();
		}

		$list = list_create_datarows($application, $action);

		return $list;
	}

	function list_redirect($list, $doRedirect = true)
	{
		$filter = array();
		foreach ($list['columns'] as $column) {
			$fieldname = form_create_fieldname($column['id'], $column['title_long']);

			if ((isset($_POST[$fieldname])) AND ($_POST[$fieldname] != '')) {
				$filterType = list_determine_filter_type($column['filter']);
				$content = list_create_filter_field_name($list, $column['content'], $filterType);
				$filter[$column['content']] = $content . ':' . $_POST[$fieldname];
			}
		}

		if (isset($_GET['filter'])) {
			$partsFilter = explode('~', $_GET['filter']);

			$getFilters = array();
			foreach ($partsFilter as $partFilter) {
				$partsFilterSub = explode(':', $partFilter);

				$getFilters[$partsFilterSub[0]] = $partsFilterSub[1];
			}

			foreach ($list['filter'] as $listFilter) {
				$listFilterContent = $listFilter['content'];

				if (isset($getFilters[$listFilterContent])) {
					$filter[$listFilterContent] = $listFilterContent . ':' . $getFilters[$listFilterContent];
				}
			}
		}

		if ($doRedirect) {

			if (empty($filter)) {
				$link = hic_create_link(array(), array('filter'));
			} else {
				$link = hic_create_link(array('filter' => implode('~', $filter)));
			}

			header('Location: ' . $link);

			exit();
		} else {
			return implode('~', $filter);
		}
	}

?>